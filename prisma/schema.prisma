generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model Profile {
  id                        String             @id @default(dbgenerated("gen_random_uuid()"))
  firstName                 String?
  lastName                  String?
  metadata                  Json?
  profileImage              String?
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @default(now()) @updatedAt
  deletedAt                 DateTime?
  userId                    String             @unique
  role                      Role               @default(ROOMMATE)
  announcementsSentBy       Announcement[]     @relation("SentBy")
  announcementsReceivedBy   Announcement[]     @relation("SentTo")
  assignedChoreListItems    ChoreListItem[]    @relation("AssignedChoreListItems")
  createdChoreListItems     ChoreListItem[]    @relation("CreatedChoreListItems")
  assignedShoppingListItems ShoppingListItem[] @relation("AssignedShoppingListItems")
  createdShoppingListItems  ShoppingListItem[] @relation("CreatedShoppingListItems")
  buildings                 Building[]         @relation("BuildingMembers")
  rooms                     Room[]             @relation("RoomMembers")
  event                     Event[]
  
  @@map("profile")
  @@schema("public")
}

model Building {
  id       String    @id @default(dbgenerated("gen_random_uuid()"))
  name     String?
  address  String?
  metadata Json?
  members  Profile[] @relation("BuildingMembers")
  rooms    Room[]

  @@map("building")
  @@schema("public")
}

model Room {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  name          String?
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  deletedAt     DateTime?
  buildingId    String?
  announcements Announcement[]
  choreLists    ChoreList?
  event         Event[]
  building      Building?      @relation(fields: [buildingId], references: [id])
  shoppingLists ShoppingList?
  members       Profile[]      @relation("RoomMembers")

  @@map("room")
  @@schema("public")
}

model ChoreList {
  id             String          @id @default(dbgenerated("gen_random_uuid()"))
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  deletedAt      DateTime?
  roomId         String          @unique
  room           Room            @relation(fields: [roomId], references: [id])
  choreListItems ChoreListItem[]

  @@map("chore_list")
  @@schema("public")
}

model ChoreListItem {
  id            String      @id @default(dbgenerated("gen_random_uuid()"))
  name          String?
  type          String?
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  deletedAt     DateTime?
  choreListId   String
  assignedToId  String?
  createdById   String?
  status        ChoreStatus @default(OPEN)
  dueDate       DateTime?
  proof         String?
  requiresProof Boolean?
  assignedTo    Profile?    @relation("AssignedChoreListItems", fields: [assignedToId], references: [id])
  choreList     ChoreList   @relation(fields: [choreListId], references: [id])
  createdBy     Profile?    @relation("CreatedChoreListItems", fields: [createdById], references: [id])

  @@map("chore_list_item")
  @@schema("public")
}

model ShoppingList {
  id                String             @id @default(dbgenerated("gen_random_uuid()"))
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  deletedAt         DateTime?
  roomId            String             @unique
  room              Room               @relation(fields: [roomId], references: [id])
  shoppingListItems ShoppingListItem[]

  @@map("shopping_list")
  @@schema("public")
}

model ShoppingListItem {
  id             String                 @id @default(dbgenerated("gen_random_uuid()"))
  name           String?
  type           String?
  quantity       Float?
  metadata       Json?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @default(now()) @updatedAt
  deletedAt      DateTime?
  shoppingListId String
  assignedToId   String?
  createdById    String?
  status         ShoppingListItemStatus @default(OPEN)
  assignedTo     Profile?               @relation("AssignedShoppingListItems", fields: [assignedToId], references: [id])
  createdBy      Profile?               @relation("CreatedShoppingListItems", fields: [createdById], references: [id])
  shoppingList   ShoppingList           @relation(fields: [shoppingListId], references: [id])

  @@map("shopping_list_item")
  @@schema("public")
}

model Announcement {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  content   String?
  status    String?
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  roomId    String
  sentById  String
  sentToId  String?
  room      Room      @relation(fields: [roomId], references: [id])
  sentBy    Profile   @relation("SentBy", fields: [sentById], references: [id])
  sentTo    Profile?  @relation("SentTo", fields: [sentToId], references: [id])

  @@map("announcement")
  @@schema("public")
}

model Event {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdById String
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  title       String
  description String?  @default("NULL")
  startTime   DateTime @db.Timestamptz(6)
  endTime     DateTime @db.Timestamptz(6)
  isAllDay    Boolean  @default(false)
  location    String?  @default("NULL")
  category    String?  @default("NULL")
  metadata    Json?
  roomId      String?
  profile     Profile  @relation(fields: [createdById], references: [id])
  room        Room?    @relation(fields: [roomId], references: [id], onDelete: Restrict)

  @@map("event")
  @@schema("public")
}

enum Role {
  ADMIN
  ROOMMATE
  MANAGER

  @@schema("public")
}

enum ChoreStatus {
  OPEN
  CANCELED
  DONE

  @@schema("public")
}

enum ShoppingListItemStatus {
  OPEN
  CANCELED
  DONE

  @@schema("public")
}
